type Like @searchable @model @auth(rules: [{ allow: public }]) {
  id: ID!
  postID: ID @index(name: "byPost")
  User: User @hasOne
}

type Comment @searchable @model @auth(rules: [{ allow: public }]) {
  id: ID!
  content: String
  postID: ID @index(name: "byPost")
  User: User @hasOne
}

type Post @searchable @model @auth(rules: [{ allow: public }]) {
  id: ID!
  content: String
  image: String
  userID: ID @index(name: "byUser")
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
}

type User @searchable @model @auth(rules: [{ allow: public }]) {
  id: ID!
  email: AWSEmail!
  name: String
  tag: String
  picture: String
  lastOnlineAt: String
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
}

type Subscription {
  onCreatePostByUserId(userID: ID!): Post @aws_subscribe(mutations: ["createPost"])
  onUpdateUserById(id: ID!): User @aws_subscribe(mutations: ["updateUser"])
}
